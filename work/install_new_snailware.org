#+TITLE:  Install notes for SN@ilWare software
#+AUTHOR: Xavier Garrido
#+EMAIL:  xavier.garrido@lal.in2p3.fr
#+DATE:   15/10/2013
#+DESCRIPTION: Quick notes on how to install new SN@ilWare software on different machines
#+OPTIONS: ^:{} email:nil
#+LATEX_CLASS: snemo-note

* Install @ LAL
** Preamble
*** Configuration of installation directory
#+BEGIN_SRC sh
  export SW_WORK_DIR=/exp/nemo/garrido/tmp
#+END_SRC
*** Machine configuration
#+BEGIN_SRC sh
  uname -a
  Linux nemo3.lal.in2p3.fr 2.6.32-220.13.1.el6.x86_64 #1 SMP Tue Apr 17 15:16:22 CDT 2012 x86_64 x86_64 x86_64 GNU/Linux
#+END_SRC
#+BEGIN_SRC sh
  gcc --version
  gcc (GCC) 4.7.2 20121015 (Red Hat 4.7.2-5)
#+END_SRC

** Cadfael
*** Checking out
#+BEGIN_SRC sh
  svn co https://nemo.lpc-caen.in2p3.fr/svn/Cadfael/trunk \
      ${SW_WORK_DIR}/Cadfael/trunk
#+END_SRC
*** Configuration
To setup =Cadfael=, first create the following directory
#+BEGIN_SRC sh
  mkdir ${SW_WORK_DIR}/Cadfael/build && cd ${SW_WORK_DIR}/Cadfael/build
#+END_SRC
Then simply do
#+BEGIN_SRC sh
  cmake                                                     \
      -DCMAKE_INSTALL_PREFIX=${SW_WORK_DIR}/Cadfael/install \
      -DCADFAEL_VERBOSE_BUILD=ON                            \
      -DCADFAEL_STEP_TARGETS=ON                             \
      -Dport/patchelf=ON                                    \
      -Dport/gsl=ON                                         \
      -Dport/clhep=ON                                       \
      -Dport/boost=ON                                       \
      -Dport/boost+regex=ON                                 \
      -Dport/camp=ON                                        \
      -Dport/xerces-c=ON                                    \
      -Dport/geant4=ON                                      \
      -Dport/geant4+gdml=ON                                 \
      -Dport/geant4+x11=ON                                  \
      -Dport/geant4+data=ON                                 \
      -Dport/root=ON                                        \
      -Dport/root+x11=ON                                    \
      -Dport/root+asimage=ON                                \
      -Dport/root+mathmore=ON                               \
      -Dport/root+opengl=ON                                 \
      ${SW_WORK_DIR}/Cadfael/trunk/
#+END_SRC
then execute the =make= command
#+BEGIN_SRC sh
  make
#+END_SRC
*** Ports status [8/8]

- [X] patchelf
- [X] GSL
- [X] CLHEP
- [X] boost
- [X] camp
- [X] xerces-c
- [X] Geant4
  - [X] =-Dport/geant4+gdml= will install Xerces-C
  - [X] =-Dport/geant4+data=
- [X] ROOT
  - [X] =-Dport/root+mathmore=
  - [X] =-Dport/root+opengl=
** Bayeux
*** Configuration
To setup =Bayeux=, execute the following code
#+BEGIN_SRC sh
  cmake                                                    \
      -DCMAKE_INSTALL_PREFIX=${SW_WORK_DIR}/Bayeux/install \
      -DCMAKE_PREFIX_PATH=${SW_WORK_DIR}/Cadfael/install   \
      -DBayeux_ENABLE_TESTING=ON                           \
      -DBayeux_WITH_GEANT4=ON                              \
      ${SW_WORK_DIR}/Bayeux/trunk/
#+END_SRC

To run the compilation process on several CPU cores do
#+BEGIN_SRC sh
  make -j8 install
#+END_SRC
*** Test programs [10/10]
Adding option =-DBayeux_ENABLE_TESTING=ON= to the =cmake= command will enable
the compilation of test programs. Then doing =make test= will launch each of
the *237 test programs* and it will eventually shows some broken tests.

- [X] datatools
- [X] brio
- [X] cuts
- [X] genbb_help
- [X] geomtools
- [X] genvtx
- [X] mygsl
- [X] materials
- [X] dpp
- [X] mctools

** Falaise
*** Configuration
To setup =Falaise= with an already version of =Bayeux= installed, do
#+BEGIN_SRC sh
  cmake                                                                                  \
      -DCMAKE_INSTALL_PREFIX=${SW_WORK_DIR}/Falaise/install                              \
      -DCMAKE_PREFIX_PATH="${SW_WORK_DIR}/Cadfael/install;${SW_WORK_DIR}/Bayeux/install" \
      -DFalaise_ENABLE_TESTING=ON                                                        \
      -DFalaise_BUILD_DOCS=ON                                                            \
      -DFalaise_USE_SYSTEM_BAYEUX=ON                                                     \
      ${SW_WORK_DIR}/Falaise/trunk
#+END_SRC

To run the compilation process on several CPU cores do
#+BEGIN_SRC sh
  make -j8 install
#+END_SRC
*** Basic tests
#+BEGIN_SRC sh
  cd ${SW_WORK_DIR}/Falaise/build
  ./BuildProducts/bin/flsimulate -n 10 -o /tmp/${USER}/snemo_tc_muons_roof.xml
  ./BuildProducts/bin/flreconstruct -i /tmp/${USER}/snemo_tc_muons_roof.xml
#+END_SRC

Tests successfully passed.

* Install @ CC
** Preamble
*** Configuration of =cmake=
First you should use a more decent version of =cmake= by doing
#+BEGIN_SRC sh
  source $THRONG_DIR/sw/config/SL6.4/nemo_basic_sw_setup-1.0.bash
  do_nemo_basics_sw_setup_1
#+END_SRC
You will get version 2.8.10.2 of =cmake=.
*** Configuration of installation directory
#+BEGIN_SRC sh
  export SW_WORK_DIR=/sps/nemo/scratch/garrido/tmp
#+END_SRC
*** Machine configuration
#+BEGIN_SRC sh
  uname -a
  Linux ccage031 2.6.32-358.14.1.el6.x86_64 #1 SMP Tue Jul 16 14:24:33 CDT 2013 x86_64 x86_64 x86_64 GNU/Linux
#+END_SRC
#+BEGIN_SRC sh
  gcc --version | head -1
  gcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-3)
#+END_SRC

** Cadfael
*** Checking out
#+BEGIN_SRC sh
  svn co https://nemo.lpc-caen.in2p3.fr/svn/Cadfael/trunk \
      ${SW_WORK_DIR}/Cadfael/trunk
#+END_SRC
*** Configuration
To setup =Cadfael=, first create the following directory
#+BEGIN_SRC sh
  mkdir -p ${SW_WORK_DIR}/Cadfael/build && cd ${SW_WORK_DIR}/Cadfael/build
#+END_SRC
Then simply do
#+BEGIN_SRC sh
  cmake                                                     \
      -DCMAKE_INSTALL_PREFIX=${SW_WORK_DIR}/Cadfael/install \
      -DCADFAEL_VERBOSE_BUILD=ON                            \
      -DCADFAEL_STEP_TARGETS=ON                             \
      -Dport/patchelf=ON                                    \
      -Dport/gsl=ON                                         \
      -Dport/clhep=ON                                       \
      -Dport/boost=ON                                       \
      -Dport/boost+regex=ON                                 \
      -Dport/camp=ON                                        \
      -Dport/xerces-c=ON                                    \
      -Dport/geant4=ON                                      \
      -Dport/geant4+gdml=ON                                 \
      -Dport/geant4+x11=ON                                  \
      -Dport/geant4+data=ON                                 \
      -Dport/root=ON                                        \
      -Dport/root+x11=ON                                    \
      -Dport/root+asimage=ON                                \
      -Dport/root+mathmore=ON                               \
      -Dport/root+opengl=ON                                 \
      ${SW_WORK_DIR}/Cadfael/trunk/
#+END_SRC
then execute the =make= command
#+BEGIN_SRC sh
  make
#+END_SRC
*** Ports status [8/8]

- [X] patchelf
- [X] GSL
- [X] CLHEP
- [X] boost
- [X] camp
- [X] xerces-c
- [X] Geant4
  - [X] =-Dport/geant4+gdml= will install Xerces-C
  - [X] =-Dport/geant4+data=
- [X] ROOT
  - [X] =-Dport/root+mathmore=
  - [X] =-Dport/root+opengl=

** Bayeux
*** Checking out
#+BEGIN_SRC sh
  svn co https://nemo.lpc-caen.in2p3.fr/svn/Bayeux/trunk \
      ${SW_WORK_DIR}/Bayeux/trunk
#+END_SRC
*** Configuration
To setup =Bayeux=, first create the following directory
#+BEGIN_SRC sh
  mkdir -p ${SW_WORK_DIR}/Bayeux/build && cd ${SW_WORK_DIR}/Bayeux/build
#+END_SRC
Then simply do
#+BEGIN_SRC sh
  cmake                                                    \
      -DCMAKE_INSTALL_PREFIX=${SW_WORK_DIR}/Bayeux/install \
      -DCMAKE_PREFIX_PATH=${SW_WORK_DIR}/Cadfael/install   \
      -DBayeux_ENABLE_TESTING=ON                           \
      -DBayeux_WITH_GEANT4=ON                              \
      ${SW_WORK_DIR}/Bayeux/trunk/
#+END_SRC

To run the compilation process on several CPU cores do
#+BEGIN_SRC sh
  make -j6 install
#+END_SRC
*** Test programs [10/10]
Adding option =-DBayeux_ENABLE_TESTING=ON= to the =cmake= command will enable
the compilation of test programs. Then doing =make test= will launch each of
the *238 test programs* and it will eventually shows some broken tests.

- [X] datatools
- [X] brio
- [X] cuts
- [X] genbb_help
- [X] geomtools
- [X] genvtx
- [X] mygsl
- [X] materials
- [X] dpp
- [X] mctools
** Falaise
*** Checking out
#+BEGIN_SRC sh
  svn co https://nemo.lpc-caen.in2p3.fr/svn/Falaise/trunk \
      ${SW_WORK_DIR}/Falaise/trunk
#+END_SRC
*** Configuration
To setup =Falaise= with an already version of =Bayeux= installed, first create
the following directory
#+BEGIN_SRC sh
  mkdir -p ${SW_WORK_DIR}/Falaise/build && cd ${SW_WORK_DIR}/Falaise/build
#+END_SRC
Then configure =Falaise=
#+BEGIN_SRC sh
  cmake                                                                                  \
      -DCMAKE_INSTALL_PREFIX=${SW_WORK_DIR}/Falaise/install                              \
      -DCMAKE_PREFIX_PATH="${SW_WORK_DIR}/Cadfael/install;${SW_WORK_DIR}/Bayeux/install" \
      -DFalaise_ENABLE_TESTING=ON                                                        \
      -DFalaise_BUILD_DOCS=OFF                                                           \
      -DFalaise_USE_SYSTEM_BAYEUX=ON                                                     \
      ${SW_WORK_DIR}/Falaise/trunk
#+END_SRC

*Remark:* =doxygen= version @ Lyon is 1.6 which does not fulfill requirements
for building =Falaise= documentation.

To run the compilation process on several CPU cores do
#+BEGIN_SRC sh
  make -j6 install
#+END_SRC

*** Basic tests
#+BEGIN_SRC sh
  cd ${SW_WORK_DIR}/Falaise/build
  ./BuildProducts/bin/flsimulate -n 10 -o /tmp/${USER}/snemo_tc_muons_roof.xml
  ./BuildProducts/bin/flreconstruct -i /tmp/${USER}/snemo_tc_muons_roof.xml
#+END_SRC

Tests successfully passed.

* Install @ laptop
** Machine configuration
#+BEGIN_SRC sh
  uname -a
  Linux garrido-laptop 3.11.4-1-ARCH #1 SMP PREEMPT Sat Oct 5 21:22:51 CEST 2013 x86_64 GNU/Linux
#+END_SRC
#+BEGIN_SRC sh
  cmake --version
  cmake version 2.8.12
#+END_SRC

** With =g++ (GCC) 4.8.2=
*** Cadfael
**** Checking out
#+BEGIN_SRC sh
  svn co https://nemo.lpc-caen.in2p3.fr/svn/Cadfael/trunk \
      ~/Workdir/NEMO/supernemo/snware_test/cadfael/trunk
#+END_SRC
**** Configuration
To setup =Cadfael= simply do
#+BEGIN_SRC sh
  cmake                                                                           \
      -DCMAKE_INSTALL_PREFIX=~/Workdir/NEMO/supernemo/new_snware/cadfael/install  \
      -DCADFAEL_VERBOSE_BUILD=ON                                                  \
      -DCADFAEL_STEP_TARGETS=ON                                                   \
      -Dport/patchelf=ON                                                          \
      -Dport/gsl=ON                                                               \
      -Dport/clhep=ON                                                             \
      -Dport/boost=ON                                                             \
      -Dport/boost+regex=ON                                                       \
      -Dport/camp=ON                                                              \
      -Dport/xerces-c=ON                                                          \
      -Dport/geant4=ON                                                            \
      -Dport/geant4+gdml=ON                                                       \
      -Dport/geant4+x11=ON                                                        \
      -Dport/geant4+data=ON                                                       \
      -Dport/root=ON                                                              \
      -Dport/root+x11=ON                                                          \
      -Dport/root+asimage=ON                                                      \
      -Dport/root+mathmore=ON                                                     \
      -Dport/root+opengl=ON                                                       \
      ~/Workdir/NEMO/supernemo/new_snware/cadfael/trunk
#+END_SRC
then execute the =make= command
#+BEGIN_SRC sh
  make
#+END_SRC
**** Ports status [7/8]

- [X] patchelf
- [X] GSL
- [X] CLHEP
- [X] boost (see [[Boost test error]] and fix)
- [X] camp
- [-] xerces-c
- [X] Geant4
- [X] ROOT

**** Xerces-C test error
#+BEGIN_SRC sh
  Making check in samples
  1099,1103c1099
  < String expression test failed at line 5735
  < String expression test failed at line 5746
  < String expression test failed at line 5749
  < String expression test failed at line 5752
  < Test Failed
  ---
  > Test Run Successfully
  make[3]: *** [check] Erreur 1
  make[2]: *** [ports/xerces-c/xerces-c-prefix/src/xerces-c-stamp/xerces-c-test] Erreur 2
  make[1]: *** [ports/xerces-c/CMakeFiles/xerces-c.dir/all] Erreur 2
  make: *** [all] Erreur 2
#+END_SRC

The problem comes from =DTest= under =<xerces-c src
dir>/tests/src/DOM/DOMTest/DTest.cpp= line 5680 where a preprocessor macro
checks if 2 strings are "Xerces-C" equal. It fails at different place as =diff=
exhibits. It is not clear what is going on. *Solution for the time being is to
disable these tests and see if it may propagate to some other ports*
**** Boost test error

A fix will be to patch the =cstdint.hpp= file following this commit
https://svn.boost.org/trac/boost/changeset/84950

- check in boost 1.55.0 and *fix already implemented*
- but Cadfael uses boost 1.53.0 for which *fix is not implemented ! \rightarrow
  thiw works*

+Fixed since Cadfael ahs moved to Boost 1.55.0+
*** Bayeux
**** Checking out
#+BEGIN_SRC sh
  svn co https://nemo.lpc-caen.in2p3.fr/svn/Bayeux/trunk \
      ~/Workdir/NEMO/supernemo/new_snware/bayeux/repo
#+END_SRC
**** Configuration
To setup =Bayeux= execute the following code
#+BEGIN_SRC sh
  cmake                                                                         \
      -DCMAKE_INSTALL_PREFIX=~/Workdir/NEMO/supernemo/new_snware/bayeux/install \
      -DCMAKE_PREFIX_PATH=~/Workdir/NEMO/supernemo/new_snware/cadfael/install   \
      -DBayeux_ENABLE_TESTING=ON                                                \
      -DBayeux_WITH_GEANT4=ON                                                   \
      -G Ninja -DCMAKE_MAKE_PROGRAM=$(pkgtools__get_binary_path ninja)          \
      ~/Workdir/NEMO/supernemo/new_snware/bayeux/repo
#+END_SRC
**** Test programs [10/10]

- [X] datatools
- [X] brio
- [X] cuts
- [X] genbb_help
- [X] geomtools
- [X] genvtx
- [X] mygsl
- [X] materials
- [X] dpp
- [X] mctools

*** TODO Falaise
* Install @ pc-server
** Preamble
*** Configuration of installation directory
#+BEGIN_SRC sh
  export SW_WORK_DIR=/data/workdir/nemo/supernemo/snware_test
#+END_SRC
*** Machine configuration
#+BEGIN_SRC sh
  uname -a
  Linux pc-91089 3.11.0-12-generic #19-Ubuntu SMP Wed Oct 9 16:12:00 UTC 2013 i686 i686 i686 GNU/Linux
#+END_SRC
#+BEGIN_SRC sh
  g++ --version | head -1
  g++ (Ubuntu/Linaro 4.8.1-10ubuntu8) 4.8.1
#+END_SRC
#+BEGIN_SRC sh
  cmake --version
  cmake version 2.8.11.2
#+END_SRC
** Cadfael
*** Checking out
#+BEGIN_SRC sh
  svn co https://nemo.lpc-caen.in2p3.fr/svn/Cadfael/trunk \
      ${SW_WORK_DIR}/Cadfael/trunk
#+END_SRC
*** Configuration
To setup =Cadfael=, first create the following directory
#+BEGIN_SRC sh
  mkdir ${SW_WORK_DIR}/Cadfael/build && cd ${SW_WORK_DIR}/Cadfael/build
#+END_SRC
Then simply do
#+BEGIN_SRC sh
  cmake                                                     \
      -DCMAKE_INSTALL_PREFIX=${SW_WORK_DIR}/Cadfael/install \
      -DCADFAEL_VERBOSE_BUILD=ON                            \
      -DCADFAEL_STEP_TARGETS=ON                             \
      -Dport/patchelf=ON                                    \
      -Dport/gsl=ON                                         \
      -Dport/clhep=ON                                       \
      -Dport/boost=ON                                       \
      -Dport/boost+regex=ON                                 \
      -Dport/camp=ON                                        \
      -Dport/xerces-c=ON                                    \
      -Dport/geant4=ON                                      \
      -Dport/geant4+gdml=ON                                 \
      -Dport/geant4+x11=ON                                  \
      -Dport/geant4+data=ON                                 \
      -Dport/root=ON                                        \
      -Dport/root+x11=ON                                    \
      -Dport/root+asimage=ON                                \
      -Dport/root+mathmore=ON                               \
      -Dport/root+opengl=ON                                 \
      ${SW_WORK_DIR}/Cadfael/trunk
#+END_SRC
then execute the =make= command
#+BEGIN_SRC sh
  make
#+END_SRC
*** Ports status [7/8]

- [X] patchelf
- [X] GSL
- [-] CLHEP
- [X] boost
- [X] camp
- [X] xerces-c
- [X] Geant4
  - [X] =-Dport/geant4+gdml= will install Xerces-C
  - [X] =-Dport/geant4+data=
- [X] ROOT
  - [X] =-Dport/root+mathmore=
  - [X] =-Dport/root+opengl=

**** CLHEP test error
*Need to have a look into the logs.*
#+BEGIN_SRC sh
  96% tests passed, 2 tests failed out of 47

  Total Test time (real) =  18.38 sec

  The following tests FAILED:
           24 - testInstanceRestore (Failed)
           29 - testBug58950 (Failed)
  Errors while running CTest
  make[4]: *** [test] Erreur 8
  make[3]: *** [ports/clhep/clhep-prefix/src/clhep-stamp/clhep-test] Erreur 2
  make[2]: *** [ports/clhep/CMakeFiles/clhep.dir/all] Erreur 2
  make[1]: *** [ports/clhep/CMakeFiles/clhep.dir/rule] Erreur 2
  make: *** [clhep] Erreur 2
#+END_SRC

I had to disable the tests of CLHEP since one of them was failing and thus
stopping the compilation of other ports. To remove test, I have commented two
lines (line 38 & 39) located in file
=$SW_WORK_DIR/Cadfael/trunk/ports/clhep/CMakeLists.txt=.

** Bayeux
*** Checking out
#+BEGIN_SRC sh
  svn co https://nemo.lpc-caen.in2p3.fr/svn/Bayeux/trunk \
      ${SW_WORK_DIR}/Bayeux/trunk
#+END_SRC
*** Configuration
To setup =Bayeux=, first create the following directory
#+BEGIN_SRC sh
  mkdir -p ${SW_WORK_DIR}/Bayeux/build && cd ${SW_WORK_DIR}/Bayeux/build
#+END_SRC
Then simply do
#+BEGIN_SRC sh
  cmake                                                    \
      -DCMAKE_INSTALL_PREFIX=${SW_WORK_DIR}/Bayeux/install \
      -DCMAKE_PREFIX_PATH=${SW_WORK_DIR}/Cadfael/install   \
      -DBayeux_ENABLE_TESTING=ON                           \
      -DBayeux_WITH_GEANT4=ON                              \
      ${SW_WORK_DIR}/Bayeux/trunk/
#+END_SRC

To run the compilation process do
#+BEGIN_SRC sh
  make install
#+END_SRC
*** Test programs [0/10]
Adding option =-DBayeux_ENABLE_TESTING=ON= to the =cmake= command will enable
the compilation of test programs. Then doing =make test= will launch each of
the *238 test programs* and it will eventually shows some broken tests.

- [ ] datatools
- [ ] brio
- [ ] cuts
- [ ] genbb_help
- [ ] geomtools
- [ ] genvtx
- [ ] mygsl
- [ ] materials
- [ ] dpp
- [ ] mctools (see below)

**** =mctools= compilation error
Compilation of =mctools= component generates the following error
#+BEGIN_SRC sh
  Building CXX object source/CMakeFiles/Bayeux_mctools_geant4.dir/bxmctools/src/g4/primary_generator.cc.o
  /mnt/xwscratch/snailware/software/Bayeux/trunk/source/bxmctools/src/g4/primary_generator.cc: In member function ‘void mctools::g4::primary_generator::_generate_event(G4Event*)’:
  /mnt/xwscratch/snailware/software/Bayeux/trunk/source/bxmctools/src/g4/primary_generator.cc:365: error: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
  /usr/lib/gcc/i386-redhat-linux/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h:702: note: candidate 1: typename _Alloc::rebind<_CharT>::other::reference std::basic_string<_CharT, _Traits, _Alloc>::operator[](typename _Alloc::rebind<_CharT>::other::size_type) [with _CharT = char, _Traits = std::char_traits<char>, _Alloc = std::allocator<char>]
  /mnt/xwscratch/snailware/software/Bayeux/trunk/source/bxmctools/src/g4/primary_generator.cc:365: note: candidate 2: operator[](const char*, int) <built-in>
  make[2]: *** [source/CMakeFiles/Bayeux_mctools_geant4.dir/bxmctools/src/g4/primary_generator.cc.o] Error 1
  make[1]: *** [source/CMakeFiles/Bayeux_mctools_geant4.dir/all] Error 2
  make: *** [all] Error 2
#+END_SRC
I guess this is related to =g++= version which is too old and does not handle
properly implicit cast. To overpass this problem, I changed line 365 of
=$SW_WORK_DIR/Bayeux/trunk/source/bxmctools/src/g4/primary_generator.cc= by
replacing the =G4string= type by a =std::string= type. Then I also changed the
declaration line 376 to something like
#+BEGIN_SRC c++
  G4ParticleDefinition * g4_particle = particle_table->FindParticle ((G4String)g4_particle_name);
#+END_SRC
* Install @ VMWare
** Preamble
*** Connection to machine
#+BEGIN_SRC sh
  ssh -p 2026 vmuser@134.158.89.155
#+END_SRC
*** Machine configuration
#+BEGIN_SRC sh
  uname -a
  Linux xwlivecd_sl.localdomain 2.6.18-308.13.1.el5 #1 SMP Tue Aug 21 18:49:37 EDT 2012 i686 i686 i386 GNU/Linux
#+END_SRC
#+BEGIN_SRC sh
  g++ --version | head -1
  g++ (GCC) 4.1.2 20080704 (Red Hat 4.1.2-50)
#+END_SRC
*** Prerequisites
Since the machine embeds a SL5.5 linux distribution, some third-party software
components are missing. Especially, a decent version of =cmake= software has to
be installed (version from SL5.5 =yum= repositories are too deprecated). The
following table shows which external software have been (manually) installed

#+CAPTION: *Third-party software components installed*
|----------+----------|
| Software |  Version |
| cmake    | 2.8.12.1 |
|----------+----------|

The needed softwares are installed in =/mnt/xwscratch/snailware/thirdparty=
directory. A =download= directory contains the tarballs and everything is
installed in =install= directory.

To use them, we should explicitly add the install path to the =PATH= environment
variable.
#+BEGIN_SRC sh
  export PATH=/mnt/xwscratch/snailware/thirdparty/install/bin:$PATH
#+END_SRC

I also had to install through =yum= package manager several packages listed in
the following table

#+CAPTION: *Missing software components installed through =yum install= commmand*
|-------------+-------------|
| Package     | Required by |
| patch       | patchelf    |
| expat-devel | geant4      |
|-------------+-------------|

*** Configuration of installation directory
#+BEGIN_SRC sh
  export SW_WORK_DIR=/mnt/xwscratch/snailware/software
#+END_SRC

** Cadfael
*** Checking out
#+BEGIN_SRC sh
  svn co https://nemo.lpc-caen.in2p3.fr/svn/Cadfael/trunk \
      ${SW_WORK_DIR}/Cadfael/trunk
#+END_SRC
*** Configuration
To setup =Cadfael=, first create the following directory
#+BEGIN_SRC sh
  mkdir -p ${SW_WORK_DIR}/Cadfael/build && cd ${SW_WORK_DIR}/Cadfael/build
#+END_SRC
Then simply do
#+BEGIN_SRC sh
  cmake                                             \
      -DCMAKE_INSTALL_PREFIX=${SW_WORK_DIR}/install \
      -DCADFAEL_VERBOSE_BUILD=ON                    \
      -DCADFAEL_STEP_TARGETS=ON                     \
      -Dport/patchelf=ON                            \
      -Dport/gsl=ON                                 \
      -Dport/clhep=ON                               \
      -Dport/boost=ON                               \
      -Dport/boost+regex=ON                         \
      -Dport/camp=ON                                \
      -Dport/xerces-c=ON                            \
      -Dport/geant4=ON                              \
      -Dport/geant4+gdml=ON                         \
      -Dport/geant4+x11=ON                          \
      -Dport/geant4+data=ON                         \
      -Dport/root=ON                                \
      -Dport/root+x11=ON                            \
      -Dport/root+asimage=ON                        \
      -Dport/root+mathmore=ON                       \
      -Dport/root+opengl=ON                         \
      ${SW_WORK_DIR}/Cadfael/trunk/
#+END_SRC
then execute the =make= command
#+BEGIN_SRC sh
  make
#+END_SRC
*** Ports status [7/8]

- [X] patchelf
- [X] GSL
- [ ] CLHEP (see below)
- [X] boost
- [X] camp
- [X] xerces-c
- [X] Geant4
  - [X] =-Dport/geant4+gdml= will install Xerces-C
  - [X] =-Dport/geant4+data=
- [X] ROOT
  - [X] =-Dport/root+mathmore=
  - [X] =-Dport/root+opengl=

**** CLHEP test error
I had to disable the tests of CLHEP since one of them was failing and thus
stopping the compilation of other ports. To remove test, I have commented two
lines (line 38 & 39) located in file
=$SW_WORK_DIR/Cadfael/trunk/ports/clhep/CMakeLists.txt=.
** Bayeux
*** Checking out
#+BEGIN_SRC sh
  svn co https://nemo.lpc-caen.in2p3.fr/svn/Bayeux/trunk \
      ${SW_WORK_DIR}/Bayeux/trunk
#+END_SRC
*** Configuration
To setup =Bayeux=, first create the following directory
#+BEGIN_SRC sh
  mkdir -p ${SW_WORK_DIR}/Bayeux/build && cd ${SW_WORK_DIR}/Bayeux/build
#+END_SRC
Then simply do
#+BEGIN_SRC sh
  cmake                                             \
      -DCMAKE_INSTALL_PREFIX=${SW_WORK_DIR}/install \
      -DCMAKE_PREFIX_PATH=${SW_WORK_DIR}/install    \
      -DBayeux_ENABLE_TESTING=ON                    \
      -DBayeux_WITH_GEANT4=ON                       \
      ${SW_WORK_DIR}/Bayeux/trunk/
#+END_SRC

To run the compilation process do
#+BEGIN_SRC sh
  make install
#+END_SRC
*** Test programs [9/10]
Adding option =-DBayeux_ENABLE_TESTING=ON= to the =cmake= command will enable
the compilation of test programs. Then doing =make test= will launch each of
the *238 test programs* and it will eventually shows some broken tests.

- [X] datatools
- [X] brio
- [X] cuts
- [X] genbb_help
- [X] geomtools
- [X] genvtx
- [X] mygsl
- [X] materials
- [X] dpp
- [ ] mctools (see below)

**** =mctools= compilation error
Compilation of =mctools= component generates the following error
#+BEGIN_SRC sh
  Building CXX object source/CMakeFiles/Bayeux_mctools_geant4.dir/bxmctools/src/g4/primary_generator.cc.o
  /mnt/xwscratch/snailware/software/Bayeux/trunk/source/bxmctools/src/g4/primary_generator.cc: In member function ‘void mctools::g4::primary_generator::_generate_event(G4Event*)’:
  /mnt/xwscratch/snailware/software/Bayeux/trunk/source/bxmctools/src/g4/primary_generator.cc:365: error: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
  /usr/lib/gcc/i386-redhat-linux/4.1.2/../../../../include/c++/4.1.2/bits/basic_string.h:702: note: candidate 1: typename _Alloc::rebind<_CharT>::other::reference std::basic_string<_CharT, _Traits, _Alloc>::operator[](typename _Alloc::rebind<_CharT>::other::size_type) [with _CharT = char, _Traits = std::char_traits<char>, _Alloc = std::allocator<char>]
  /mnt/xwscratch/snailware/software/Bayeux/trunk/source/bxmctools/src/g4/primary_generator.cc:365: note: candidate 2: operator[](const char*, int) <built-in>
  make[2]: *** [source/CMakeFiles/Bayeux_mctools_geant4.dir/bxmctools/src/g4/primary_generator.cc.o] Error 1
  make[1]: *** [source/CMakeFiles/Bayeux_mctools_geant4.dir/all] Error 2
  make: *** [all] Error 2
#+END_SRC
I guess this is related to =g++= version which is too old and does not handle
properly implicit cast. To overpass this problem, I changed line 365 of
=$SW_WORK_DIR/Bayeux/trunk/source/bxmctools/src/g4/primary_generator.cc= by
replacing the =G4string= type by a =std::string= type. Then I also changed the
declaration line 376 to something like
#+BEGIN_SRC c++
  G4ParticleDefinition * g4_particle = particle_table->FindParticle ((G4String)g4_particle_name);
#+END_SRC
** Falaise
*** Checking out
#+BEGIN_SRC sh
  svn co https://nemo.lpc-caen.in2p3.fr/svn/Falaise/trunk \
      ${SW_WORK_DIR}/Falaise/trunk
#+END_SRC
*** Configuration
To setup =Falaise= with an already version of =Bayeux= installed, first create
the following directory
#+BEGIN_SRC sh
  mkdir -p ${SW_WORK_DIR}/Falaise/build && cd ${SW_WORK_DIR}/Falaise/build
#+END_SRC
Then configure =Falaise=
#+BEGIN_SRC sh
  cmake                                             \
      -DCMAKE_INSTALL_PREFIX=${SW_WORK_DIR}/install \
      -DCMAKE_PREFIX_PATH=${SW_WORK_DIR}/install    \
      -DFalaise_ENABLE_TESTING=ON                   \
      -DFalaise_BUILD_DOCS=OFF                      \
      -DFalaise_USE_SYSTEM_BAYEUX=ON                \
      ${SW_WORK_DIR}/Falaise/trunk
#+END_SRC

To run the compilation process do
#+BEGIN_SRC sh
  make install
#+END_SRC

*** Basic tests
#+BEGIN_SRC sh
  export PATH=${SW_WORK_DIR}/install/bin:$PATH
  flsimulate -n 10 -o /tmp/${USER}/snemo_tc_muons_roof.xml
  flreconstruct -i /tmp/${USER}/snemo_tc_muons_roof.xml
#+END_SRC

Tests successfully passed.
** Final tests
Every binaries have been placed within
=/mnt/xwscratch/snailware/software/install= directory. It means that all the
relevant parts /i.e./ library, configuration files, executables of the software
may be found here. To make use of the useful binaries for SuperNEMO simulation
and reconstruction, one has to export the =bin= directory to the =PATH=
environment variable:
#+BEGIN_SRC sh
  export PATH=/mnt/xwscratch/snailware/software/install/bin:$PATH
#+END_SRC
Then, the =flsimulate= program and the =flreconstruct= program can be execute
from everywhere.

To test each of them, you can do
#+BEGIN_SRC sh
  flsimulate -n 10 -o /tmp/${USER}/snemo_output.xml
#+END_SRC
This will generate 10 events and store the result of the simulation in the
=/tmp/${USER}/snemo_output.xml= file. To perform reconstruction of the previous
set of simulated data, you can do
#+BEGIN_SRC sh
  flreconstruct -i /tmp/${USER}/snemo_output.xml
#+END_SRC
This will dump some information related to simulated data. Making both of them
working means that everything has been installed properly.

#+LATEX: \vspace{10pt}
*Remark:*
Since binaries use =rpath= technique to embeds library path[fn:1], binaries may
be moved to other place without breaking link paths. It seems to work with
Bayeux components but for the 2 interesting Falaise binaries, namely
=flsimulate= and =flreconstruct=, it seems to have some bad hard-coded path
within these binaries. For example, if I moved the former binaries to the
=$HOME= directory, then running =$HOME/flsimulate --help= command gives the
following error
#+BEGIN_SRC sh
  terminate called after throwing an instance of 'boost::filesystem::filesystem_error'
    what():  boost::filesystem::canonical: No such file or directory: "/home/vmuser/../share/Falaise-1.0.0"
  Aborted
#+END_SRC
Clearly, there is a reference to a relative path from where the executable is
used.

* Footnotes

[fn:1] rpath is a term in programming which refers to a run-time search path
hard-coded in an executable file or library, used during dynamic linking to find
the libraries the executable or library requires.
