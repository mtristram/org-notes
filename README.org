#+TITLE:  Org-notes - README
#+AUTHOR: Xavier Garrido

* Introduction

This repository contains several quick notes.

* Orgmode settings
:PROPERTIES:
:TANGLE: README.el
:END:
** Settings for =org= to =pdf= conversion
*** Requirements
#+BEGIN_SRC emacs-lisp
  (require 'ox-latex)
  (require 'ox-beamer)
#+END_SRC
*** Use smart quote when exporting
#+BEGIN_SRC emacs-lisp
  (setq org-export-with-smart-quotes t)
#+END_SRC
*** Place table caption below table
#+BEGIN_SRC emacs-lisp
  (setq org-latex-table-caption-above nil)
#+END_SRC
*** No author
#+BEGIN_SRC emacs-lisp
(setq org-export-with-author nil)
#+END_SRC
*** Code blocks
This activates a number of widely used languages, you are encouraged to activate
more languages using the customize interface for the =org-babel-load-languages=
variable, or with an elisp form like the one below.  The customize interface of
=org-babel-load-languages= contains an up to date list of the currently
supported languages.
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (latex . t)))
#+END_SRC

You are encouraged to add the following to your personal configuration
although it is not added by default as a security precaution.
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

*** Default list of LaTeX packages
Only include one default package and remove all the crapppy stuff included by
=org= \rightarrow =latex= translation.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "org-preamble"))
#+END_SRC

*** Defining =org-latex-classes=

#+BEGIN_SRC emacs-lisp
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results none
  (add-to-list 'org-latex-classes
               '("lecture"
                 "\\documentclass{report}
                  [PACKAGES]
                  \\usepackage{lecture-style}
                  [NO-DEFAULT-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

*** =minted= setup
Code fragments are syntax highlighted using [[https://code.google.com/p/minted/][minted]] LaTeX package

#+BEGIN_SRC emacs-lisp
  (setq org-latex-listings 'minted)
  (setq org-latex-minted-options
        '(;;("frame" "lines")
          ("fontsize" "\\footnotesize")
          ("samepage" "")
          ("mathescape" "")
          ("xrightmargin" "0.5cm")
          ("xleftmargin"  "0.5cm")
          ))
#+END_SRC

*** Set LaTeX command
#+BEGIN_SRC emacs-lisp
   (defun sk-latexmk-cmd (backend)
     "When exporting from .org with latex, automatically run latex,
        pdflatex, or xelatex as appropriate, using latexmk."
     (when (org-export-derived-backend-p backend 'latex)
       (let ((texcmd)))
       (setq texcmd "jobname=$(basename %f | sed 's/\.tex//');latexmk -xelatex -shell-escape -quiet %f && mkdir -p latex.d && mv ${jobname}.* latex.d/. && mv latex.d/${jobname}.{org,tex,pdf,fdb_latexmk} .")
       (setq org-latex-pdf-process (list texcmd))))
  (org-add-hook 'org-export-before-processing-hook 'sk-latexmk-cmd)
#+END_SRC
** Settings for =org= to =html= conversion
*** Requirements
#+BEGIN_SRC emacs-lisp
  (require 'ox-html)
#+END_SRC
*** Building html preamble
#+NAME: html-preamble
#+HEADERS: :var list=""
#+BEGIN_SRC sh :tangle no :results output
  for dir in $(ls -d -1 */ | grep -v doc);do
      echo "<a href=\"$dir\">$dir</a>"
  done
#+END_SRC
*** Building file list
#+NAME: index-listing
#+HEADERS: :var directory="*/"
#+BEGIN_SRC sh :tangle no :results output
  for dir in $(ls -d -1 ${directory} | grep -v doc);do
      echo "<h2 style=\"text-transform:uppercase; font-size:0.9em; color:#777777\">${dir/\//}</h2>"
      for file in $(ls ${dir/\//}/*.org);do
          title=$(cat $file | grep "#+TITLE" | sed 's/#+TITLE://')
          description=$(cat $file | grep "#+DESCRIPTION" | sed 's/#+DESCRIPTION://')
          echo "<p><a href=\"doc/${file/.org/.html}\">$title</a>${description}</p>"
      done
  done
#+END_SRC
*** Building index pages
**** Page skeleton
***** Preamble
#+NAME: preamble
#+BEGIN_SRC sh :tangle no :results output
  echo '<?xml version="1.0" encoding="utf-8"?>'
  echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"'
  echo '          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">'
  echo '<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">'
  echo '  <head>'
  echo '    <title>org notes</title>'
  echo '    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />'
  echo '    <link rel="stylesheet" href="./doc/stylesheets/styles.css">'
  echo '      <link rel="stylesheet" href="./doc/stylesheets/org-pygments.css">'
  echo '        <style media="screen" type="text/css">'
  echo '          #preamble {'
  echo '          float:left;'
  echo '          font-size:1em;'
  echo '          width:200px;'
  echo '          padding:50px 0 0px 0;'
  echo '          }'
  echo '        </style>'
  echo '      </head>'
  echo '      <body>'
  echo '        <div id="preamble" class="status">'
#+END_SRC
***** Content
#+NAME: content
#+HEADERS: :var title=""
#+BEGIN_SRC sh :tangle no :results output :noweb yes
  echo '        </div>'
  echo '        <div id="content">'
  echo '          <h1 class="title">'${title}'</h1><hr/>'
#+END_SRC
***** Postamble
#+NAME: postamble
#+BEGIN_SRC sh :tangle no :results output :noweb yes
  echo '        </div>'
  echo '      </body>'
  echo '    </html>'
#+END_SRC

**** Main page
:PROPERTIES:
:TANGLE: index.html
:END:
#+BEGIN_SRC html :noweb yes
  <<preamble()>>
  <<content("Org notes")>>
     <p>
       <<index-listing()>>
     </p>
  <<postamble()>>
#+END_SRC

*** Define =org-project=
#+BEGIN_SRC emacs-lisp :noweb yes
  (unless (boundp 'org-publish-project-alist)
    (setq org-publish-project-alist nil))

  (setq org-html-style-default "")
  (setq org-html-htmlize-output-type 'css)

  (let* ((this-dir (file-name-directory (or load-file-name buffer-file-name))))
    (add-to-list
     'org-publish-project-alist
     `("org-notes"
       :base-directory ,this-dir
       :recursive t
       :exclude "README.org"
       :html-extension "html"
       :base-extension "org"
       :publishing-directory ,(expand-file-name "doc" this-dir)
       :publishing-function org-html-publish-to-html
       :section-numbers 2
       :time-stamp-file nil
       :html-head "<link rel=\"stylesheet\" href=\"../stylesheets/styles.css\">
                   <link rel=\"stylesheet\" href=\"../stylesheets/org-pygments.css\">"
       :html-preamble "<a href=\"../../index.html\">Retour menu principal</a>"
       :html-postamble nil))
    (add-to-list
     'org-publish-project-alist
     `("org-notes-images"
       :base-directory ,this-dir
       :base-extension "svg\\|png\\|jpg\\|gif\\|"
       :publishing-directory ,(expand-file-name "doc" this-dir)
       :recursive t
       :exclude "doc/*"
       :publishing-function org-publish-attachment))
     )
#+END_SRC
*** Markup filters
#+BEGIN_SRC emacs-lisp
  (defun on::filter-headline (contents backend info)
    (when (eq backend 'html)
      (replace-regexp-in-string "</h1>" "</h1><hr/>" contents)))
  (add-to-list 'org-export-filter-final-output-functions 'on::filter-headline)
#+END_SRC
*** Publish =org-notes= project
#+BEGIN_SRC emacs-lisp
  (defun org-notes-publish ()
    (progn
      (org-publish-project "org-notes"        'force)
      (org-publish-project "org-notes-images" 'force)))
#+END_SRC

*** CSS stylesheets
**** Main stylesheets
:PROPERTIES:
:TANGLE: doc/stylesheets/styles.css
:END:
***** Google fonts
#+BEGIN_SRC css
  @import url(https://fonts.googleapis.com/css?family=Lato:300italic,700italic,300,700);
  @import url(https://fonts.googleapis.com/css?family=Inconsolata);
  @import url(https://fonts.googleapis.com/css?family=Lobster);
#+END_SRC

***** Main =css= definitions
****** Body
#+BEGIN_SRC css
  body {
      width:860px;
      margin:0 auto;
      padding:50px;
      font:14px/1.5 Lato, "Helvetica Neue", Helvetica, Arial, sans-serif;
      color:#777777;
      font-weight:300;
  }
#+END_SRC
****** Headline
#+BEGIN_SRC css
  h1, h2, h3, h4, h5, h6 {
      color:#222222;
      margin:0 0 20px;
  }

  h1, h2, h3 {
      line-height:1.1;
  }

  h1 {
      font-family:Lobster;
      font-size:28px;
  }

  h2 {
      color:#393939;
  }

  h3, h4, h5, h6 {
      color:#494949;
  }
#+END_SRC

****** Link
#+BEGIN_SRC css
  a {
      color:#3399cc;
      font-weight:400;
      text-decoration:none;
  }

  a:hover {
      color:#006699;
  }

  a small {
      font-size:11px;
      color:#777777;
      margin-top:-0.6em;
      display:block;
  }

  a:hover small {
      color:#777777;
  }
#+END_SRC

****** Code, table, image
#+BEGIN_SRC css
  p, ul, ol, table, pre, dl {
      margin:0 0 20px;
  }

  blockquote, .remark {
      border-left:1px solid #e5e5e5;
      margin:0;
      padding:0 0 0 20px;
      font-style:italic;
  }

  code, pre, .prompt {
      font-family:Inconsolata, Monaco, Bitstream Vera Sans Mono, Lucida Console, Terminal;
      color:#777777;
      font-size:12px;
  }

  pre {
      padding:8px 15px;
      background: #f8f8f8;
      border-radius:5px;
      border:1px solid #e5e5e5;
      overflow-x: auto;
  }

  .prompt {
      margin-bottom:15px;
      padding:8px 15px;
      background: #777777;
      color:#e5e5e5;
      border-radius:5px;
      border:1px solid #e5e5e5;
      overflow-x: auto;
  }

  .prompt p {
      margin:0;
  }

  .prompt p:before {
      content: "$";
  }

  table {
      width:80%;
      border-collapse:collapse;
      margin-left: auto;
      margin-right: auto;
  }

  .table-number {
      font-weight: bold;
  }

  th, td {
      text-align:left;
      padding:5px 10px;
      border-bottom:1px solid #e5e5e5;
  }

  dt {
      color:#444444;
      font-weight:700;
  }

  th {
      color:#444444;
  }

  img {
      max-width:100%;
      display:block;
      margin-left:auto;
      margin-right:auto;
  }
#+END_SRC
****** Header
#+BEGIN_SRC css
  header {
      width:270px;
      float:left;
      position:fixed;
  }

  header ul li + li {
      width:88px;
      border-left:1px solid #fff;
  }

  header ul li + li + li {
      border-right:none;
      width:89px;
  }

  header ul a strong {
      font-size:14px;
      display:block;
      color:#222222;
  }

  header ul {
      list-style:none;
      height:40px;

      padding:0;

      background: #eee;
      background: -moz-linear-gradient(top, #f8f8f8 0%, #dddddd 100%);
      background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#f8f8f8), color-stop(100%,#dddddd));
      background: -webkit-linear-gradient(top, #f8f8f8 0%,#dddddd 100%);
      background: -o-linear-gradient(top, #f8f8f8 0%,#dddddd 100%);
      background: -ms-linear-gradient(top, #f8f8f8 0%,#dddddd 100%);
      background: linear-gradient(top, #f8f8f8 0%,#dddddd 100%);

      border-radius:5px;
      border:1px solid #d2d2d2;
      box-shadow:inset #fff 0 1px 0, inset rgba(0,0,0,0.03) 0 -1px 0;
      width:270px;
  }

  header li {
      width:89px;
      float:left;
      border-right:1px solid #d2d2d2;
      height:40px;
  }

  header li:first-child a {
      border-radius:5px 0 0 5px;
  }

  header li:last-child a {
      border-radius:0 5px 5px 0;
  }

  header ul a {
      line-height:1;
      font-size:11px;
      color:#999999;
      display:block;
      text-align:center;
      padding-top:6px;
      height:34px;
  }

  header ul a:hover {
      color:#999999;
      background: -moz-linear-gradient(top, #fff 0%, #ddd 100%);
      background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#fff), color-stop(100%,#ddd));
      background: -webkit-linear-gradient(top, #fff 0%,#ddd 100%);
      background: -o-linear-gradient(top, #fff 0%,#ddd 100%);
      background: -ms-linear-gradient(top, #fff 0%,#ddd 100%);
      background: linear-gradient(top, #fff 0%,#ddd 100%);
  }

  header ul a:active {
      -webkit-box-shadow: inset 0px 2px 2px 0px #ddd;
      -moz-box-shadow: inset 0px 2px 2px 0px #ddd;
      box-shadow: inset 0px 2px 2px 0px #ddd;
  }
#+END_SRC
****** Misc. (*bold*, =hr=, footnote)
#+BEGIN_SRC css
  strong {
      color:#222222;
      font-weight:700;
  }

  #content {
      width:600px;
      float:right;
      padding-bottom:50px;
      /* border:1px solid #e5e5e5; */
      /* border-width:1px 0;       */
      /* padding:20px 0;           */
      /* margin:0 0 20px;          */
  }

  small {
      font-size:11px;
  }

  hr {
      border:0;
      background:#e5e5e5;
      height:1px;
      margin:0 0 20px;
  }

  .center {
      text-align : center;
  }

  .footpara {
      display: inline;
  }
#+END_SRC
****** Scrollbars
#+BEGIN_SRC css
  .scrollbar-container {
      position: absolute;
      top: 0; bottom: 0; left: 0; right: 0;
      margin: 20px;

      border: 4px solid rgba(0, 0, 0, 0.2);
      overflow: auto;
      background-color: whiteSmoke;
  }

  .scrollbar-container .inner {
      height: 2011px;
      width: 1985px;
      padding: 1em;
      background-color: white;
      font-family: sans-serif;
  }

  ::-webkit-scrollbar {
      background: transparent;
  }

  ::-webkit-scrollbar-thumb {
      background-color: rgba(0, 0, 0, 0.2);
      border: solid whiteSmoke 4px;
      border-radius:15px;
  }

  ::-webkit-scrollbar-thumb:hover {
      background-color: rgba(0, 0, 0, 0.3);
  }
#+END_SRC
****** Preamble, postamble
#+BEGIN_SRC css
  #preamble {
      font-size:0.8em;
      text-transform:uppercase;
      float:left;
      margin-left:0em;
      width:20em;
      text-align:right;
      position:fixed;
  }

  #preamble hr {
      margin:0 0 0px;
  }

  #preamble a {
      display:block;
      padding:0.2em 1em;
      color:#3399cc;
  }

  #preamble a:hover {
      background-color:#39c;
      text-decoration:none;
      color:#f9f9f9;
      -webkit-transition:color .2s linear;
  }

  #preamble aa {
      display:block;
      padding:0.2em 1em;
      color:#999999;
  }

  #preamble aa:hover {
      background-color:none;
      text-decoration:none;
  }
#+END_SRC
****** Adapting to media source
#+BEGIN_SRC css
  @media print, screen and (max-width: 960px) {

      body {
          width:auto;
          margin:0;
      }

      header, content, footer {
          float:none;
          position:static;
          width:auto;
      }

      header {
          padding-right:320px;
      }

      header a small {
          display:inline;
      }

      header ul {
          position:absolute;
          right:50px;
          top:52px;
      }
  }

  @media print, screen and (max-width: 720px) {
      body {
          word-wrap:break-word;
      }

      header {
          padding:0;
      }

      header ul, header p.view {
          position:static;
      }

      pre, code {
          word-wrap:normal;
      }
  }

  @media print, screen and (max-width: 480px) {
      body {
          padding:15px;
      }

      header ul {
          display:none;
      }
  }

  @media print {
      body {
          padding:0.4in;
          font-size:12pt;
          color:#444;
      }
  }
#+END_SRC

**** Org source code styles
:PROPERTIES:
:TANGLE:   doc/stylesheets/org-pygments.css
:END:

#+BEGIN_SRC css
  .org-preprocessor {
      color: #84B818;
  }

  .org-string,
  .org-type {
      color: #DEB542;
  }

  .org-builtin,
  .org-variable-name,
  .org-constant,
  .org-function-name {
      color: #69B7F0;
  }

  .org-comment,
  .org-comment-delimiter,
  .org-doc {
      color: #93a1a1;
  }

  .org-keyword {
      color: #D33682;
  }

  pre {
      color: #777777;
  }
#+END_SRC
